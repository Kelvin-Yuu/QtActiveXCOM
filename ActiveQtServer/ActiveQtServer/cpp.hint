// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define slots
#define QAXFACTORY_END() } ~QAxFactoryList() override { qDeleteAll(factories); } QStringList featureList() const override { return factoryKeys; } const QMetaObject *metaObject(const QString&key) const override { QAxFactory *f = factories[key]; return f ? f->metaObject(key) : nullptr; } QObject *createObject(const QString &key) override { if (!creatable.value(key)) return nullptr; QAxFactory *f = factories[key]; return f ? f->createObject(key) : nullptr; } QUuid classID(const QString &key) const override { QAxFactory *f = factories.value(key); return f ? f->classID(key) : QUuid(); } QUuid interfaceID(const QString &key) const override { QAxFactory *f = factories.value(key); return f ? f->interfaceID(key) : QUuid(); } QUuid eventsID(const QString &key) const override { QAxFactory *f = factories.value(key); return f ? f->eventsID(key) : QUuid(); } void registerClass(const QString &key, QSettings *s) const override { QAxFactory *f = factories.value(key); if (f) f->registerClass(key, s); } void unregisterClass(const QString &key, QSettings *s) const override { QAxFactory *f = factories.value(key); if (f) f->unregisterClass(key, s); } QString exposeToSuperClass(const QString &key) const override { QAxFactory *f = factories.value(key); return f ? f->exposeToSuperClass(key) : QString(); } bool stayTopLevel(const QString &key) const override { QAxFactory *f = factories.value(key); return f ? f->stayTopLevel(key) : false; } bool hasStockEvents(const QString &key) const override { QAxFactory *f = factories.value(key); return f ? f->hasStockEvents(key) : false; } }; QAxFactory *qax_instantiate() { QAxFactoryList *impl = new QAxFactoryList(); return impl; } QT_END_NAMESPACE
